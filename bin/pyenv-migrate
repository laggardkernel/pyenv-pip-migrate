#!/usr/bin/env bash
#
# Summary: Migrate pip packages from a Python version to another
#
# Usage: pyenv migrate <from> <to>
#

set -e
[ -n "$PYENV_DEBUG" ] && set -x

# Provide pyenv completions
if [ "$1" = "--complete" ]; then
  exec pyenv-versions --bare
fi

if [ -z "$PYENV_ROOT" ]; then
  PYENV_ROOT="${HOME}/.pyenv"
fi

usage() {
  # We can remove the sed fallback once pyenv 0.2.0 is widely available.
  pyenv-help migrate 2>/dev/null || sed -ne '/^#/!q;s/.//;s/.//;1,4d;p' < "$0"
  [ -z "$1" ] || exit "$1"
}

migration_failed() {
  { echo
    echo "MIGRATION FAILED"
    echo
    echo "Inspect or clean up the package list at ${PIP_REQUIREMENTS}"
    [ $USER ] && echo "Inspect or clean the user package list at ${PIP_REQUIREMENTS_USER}"
  } 1>&2
  exit 1
}

# Option parsing
while [[ $# -gt 0 ]]; do
    key="$1"

    case $key in
        --user)
            USER=true
            ;;
        --venv)
            VENV=true
            ;;
        --leaves)
            LEAVES=true
            ;;
        *)
            if [ -z $src ]; then
              src="$key"
            elif [ -z $dst ]; then
              dst="$key"
            else
              (>&2 printf "Unknown parameter: %s\n" "$1")
              usage 1
            fi
            ;;
    esac
    shift
done

[ -n "$src" ] || usage 1
[ -n "$dst" ] || usage 1

pyenv-prefix "$src" 1>/dev/null 2>&1 || {
  echo "pyenv: not an installed version: $src" 1>&2
  usage 1
}

pyenv-prefix "$dst" 1>/dev/null 2>&1 || {
  echo "pyenv: not an installed version: $dst" 1>&2
  usage 1
}

if [ -z "$TMPDIR" ]; then
  TMP="/tmp"
else
  TMP="${TMPDIR%/}"
fi

SEED="$(date "+%Y%m%d%H%M%S").$$"
LOG_PATH="${TMP}/python-build.${SEED}.log"
PIP_REQUIREMENTS="${TMP}/requirements.${SEED}.txt"
PIP_REQUIREMENTS_USER="${TMP}/requirements-user.${SEED}.txt"

trap migration_failed ERR
if [ $LEAVES ]; then
  PYENV_VERSION="${src}" pyenv-exec pip install pip-autoremove
  USER_SITE_PATH=`PYENV_VERSION="${src}" pyenv-exec python -c "from __future__ import print_function; import site; print(site.USER_SITE)"`
  [ $USER ] && PYENV_VERSION="${src}" pyenv-exec pip-autoremove -L | grep "$USER_SITE_PATH" | cut -d' ' -f1,2 | sed 's/ /==/' >> "${PIP_REQUIREMENTS_USER}"
  PYENV_VERSION="${src}" pyenv-exec pip-autoremove -L | cut -d' ' -f1,2 | sed 's/ /==/' >> "${PIP_REQUIREMENTS}"
else
  [ $USER ] && PYENV_VERSION="${src}" pyenv-exec pip freeze --local --user >> "${PIP_REQUIREMENTS_USER}"
  PYENV_VERSION="${src}" pyenv-exec pip freeze --local >> "${PIP_REQUIREMENTS}"
fi

if [ $VENV ]; then
  pyenv uninstall -f "$src"
  pyenv virtualenv "$dst" "$src"
  [ $USER ] && PYENV_VERSION="${src}" pyenv-exec pip install --user --requirement "${PIP_REQUIREMENTS_USER}"
  PYENV_VERSION="${src}" pyenv-exec pip install --requirement "${PIP_REQUIREMENTS}"
else
  [ $USER ] && PYENV_VERSION="${dst}" pyenv-exec pip install --user --requirement "${PIP_REQUIREMENTS_USER}"
  PYENV_VERSION="${dst}" pyenv-exec pip install --requirement "${PIP_REQUIREMENTS}"
fi

pyenv-rehash
rm -f "${PIP_REQUIREMENTS}"
rm -f "${PIP_REQUIREMENTS_USER}"
trap - ERR
